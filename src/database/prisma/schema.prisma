// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id          String  @id @default(uuid())
  email       String  @unique @db.VarChar(255)
  password    String  @db.VarChar(100)
  name        String  @db.VarChar(100)
  git_user_id String? @unique
  privilege   Int     @default(2) @db.SmallInt()

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users_chat_rooms users_chat_rooms[]
  message          messages[]
  forum_questions  forum_questions[]
  comments         comments[]
}

model users_chat_rooms {
  user_id String
  user    users  @relation(fields: [user_id], references: [id])

  chat_room_id String
  chat_room    chat_rooms @relation(fields: [chat_room_id], references: [id])

  created_at DateTime @default(now())

  @@id([chat_room_id, user_id])
}

model messages {
  id      String @id @default(uuid())
  content String @db.Text

  sent_by_user_id String
  user            users  @relation(fields: [sent_by_user_id], references: [id])

  chat_room_id String
  chat_room    chat_rooms @relation(fields: [chat_room_id], references: [id])

  created_at DateTime @default(now())
}

model chat_rooms {
  id               String             @id @default(uuid())
  title            String             @db.VarChar(150)
  created_at       DateTime           @default(now())
  users_chat_rooms users_chat_rooms[]
  message          messages[]
}

model forum_questions {
  id      String @id @default(uuid())
  title   String @db.VarChar(255)
  content String @db.Text

  user_id                    String
  user                       users                        @relation(fields: [user_id], references: [id])
  created_at                 DateTime                     @default(now())
  comments                   comments[]
  question_technologies_tags question_technologies_tags[]
}

model comments {
  id String @id @default(uuid())

  content String @db.Text

  forum_question_id String
  forum_question    forum_questions @relation(fields: [forum_question_id], references: [id])

  user_id    String
  user       users    @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
}

model question_technologies_tags {
  forum_question_id String
  forum_question    forum_questions @relation(fields: [forum_question_id], references: [id])

  technologies_tag_id String
  technologies_tag    technologies_tag @relation(fields: [technologies_tag_id], references: [id])

  @@id([forum_question_id, technologies_tag_id])
}

model technologies_tag {
  id   String @id @default(uuid())
  name String @db.VarChar(255)

  created_at                 DateTime                     @default(now())
  question_technologies_tags question_technologies_tags[]
}
